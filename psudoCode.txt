node alphaBetaMax(board B, int alpha, int beta, int depth ) {
	if ( depth == 0 )
		return evaluate();

	node n;
	list<vector2> possible = B.possibleMoves();

	for each in possible {
		board temp = B.clone();
		temp.PlayPiece(x,y,color);
		score = alphaBetaMin(temp, alpha, beta, depth - 1 ).score;
		if( score >= beta ){
			n.score = beta;
			n.move = new Vector2(x,y);
			return n;//pruning, don't use this branch
		}
		if( score > alpha )//update alpha for this branch
		{
			alpha = score;
			n.move = new vector2(x,y);
		}
	}
	n.score = alpha;
	return n;
}
 
node alphaBetaMin(board B, int alpha, int beta, int depth ) {
	if ( depth == 0 ) return -evaluate();
	
	node n;
	list<vector2> possible = B.possibleMoves();

	for each in possible {
		board temp = B.clone();
		temp.PlayPiece(x,y,color);
		score = alphaBetaMax(temp, alpha, beta, depth - 1 ).score;
		if( score <= alpha ){
			n.score = alpha;
			n.move = new Vector2(x,y);
			return n;
		}
		if( score < beta )
		{
			beta = score; 
			n.move = new Vector2(x,y);
		}
	}
	n.score = beta;
	return n;
}
 
 
struct node {
int score;
vector2 move;
}

